# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

tosca_definitions_version: tosca_simple_profile_for_nfv_1_0

# Based on CSD04, taken from ARIA tosca definitions

artifact_types:

  tosca.artifacts.nfv.SwImage:
    _extensions:
      normative: true
      shorthand_name: SwImage
      type_qualified_name: toscanfv:SwImage
      specification: tosca-simple-nfv-1.0
      specification_section: 5.4.1
      specification_url: 'http://docs.oasis-open.org/tosca/tosca-nfv/v1.0/csd04/tosca-nfv-v1.0-csd04.html#_Toc482896067'
    derived_from: tosca.artifacts.Deployment.Image
    properties:
      name:
        description: >-
          Name of this software image.
        type: string
        required: true
      version:
        description: >-
          Version of this software image.
        type: string
        required: true
      checksum:
        description: >-
          Checksum of the software image file.
        type: string
        required: true
      container_format:
        description: >-
          The container format describes the container file format in which software image is
          provided.
        type: string
        required: true
      disk_format:
        description: >-
          The disk format of a software image is the format of the underlying disk image.
        type: string
        required: true
      min_disk:
        description: >-
          The minimal disk size requirement for this software image.
        type: scalar-unit.size
        required: true
      min_ram:
        description: >-
          The minimal disk size requirement for this software image.
        type: scalar-unit.size
        required: false
      size:
        description: >-
          The size of this software image
        type: scalar-unit.size
        required: true
      sw_image:
        description: >-
          A reference to the actual software image within VNF Package, or url.
        type: string
        required: true
      operating_system:
        description: >-
          Identifies the operating system used in the software image.
        type: string
        required: false
      supported _virtualization_enviroment:
        description: >-
          Identifies the virtualization environments (e.g. hypervisor) compatible with this software
          image.
        type: list
        entry_schema:
          type: string
        required: false

capability_types:

  tosca.capabilities.nfv.VirtualBindable:
    _extensions:
      normative: true
      shorthand_name: VirtualBindable
      type_qualified_name: tosca:VirtualBindable
      specification: tosca-simple-nfv-1.0
      specification_section: 5.5.1
      specification_url: 'http://docs.oasis-open.org/tosca/tosca-nfv/v1.0/csd04/tosca-nfv-v1.0-csd04.html#_Toc482896069'
    description: >-
      A node type that includes the VirtualBindable capability indicates that it can be pointed by
      tosca.relationships.nfv.VirtualBindsTo relationship type.
    derived_from: tosca.capabilities.Node

  tosca.capabilities.nfv.Metric:
    _extensions:
      normative: true
      shorthand_name: Metric
      type_qualified_name: tosca:Metric
      specification: tosca-simple-nfv-1.0
      specification_section: 5.5.2
      specification_url: 'http://docs.oasis-open.org/tosca/tosca-nfv/v1.0/csd04/tosca-nfv-v1.0-csd04.html#_Toc482896070'
    description: >-
      A node type that includes the Metric capability indicates that it can be monitored using an nfv.relationships.Monitor
      relationship type.
    derived_from: tosca.capabilities.Endpoint

  tosca.capabilities.nfv.VirtualCompute:
    _extensions:
      normative: true
      shorthand_name: VirtualCompute
      type_qualified_name: toscanfv:VirtualCompute
      specification: ETSI NFV SOL001 (draft 0.6.0)
      specification_section: 6.4.4
      specification_url: ''
    derived_from: tosca.capabilities.Root
    properties:
      logical_node:
        description: >-
          The Logical Node requirements.
        type: map
        entry_schema:
           type: tosca.datatypes.nfv.LogicalNodeData
        required: false
      requested_additional_capabilities:
        description: >-
          Describes additional capability for a particular VDU.
        type: map
        entry_schema:
          type: tosca.datatypes.nfv.RequestedAdditionalCapability
        required: false
      virtual_memory:
        description: >-
          Describes virtual memory of the virtualized compute.
        type: tosca.datatypes.nfv.VirtualMemory
        required: true
      virtual_cpu:
        description: >-
          Describes virtual CPU(s) of the virtualized compute.
        type: tosca.datatypes.nfv.VirtualCpu
        required: true

  tosca.capabilities.nfv.VirtualStorage:
    _extensions:
      normative: true
      shorthand_name: VirtualStorage
      type_qualified_name: tosca:VirtualStorage
      specification: tosca-simple-nfv-1.0
      specification_section: ''
      specification_url: ''
    derived_from: tosca.capabilities.Node

  tosca.capabilities.nfv.VirtualLinkable:
    _extensions:
      normative: true
      shorthand_name: VirtualLinkable
      type_qualified_name: tosca:VirtualLinkable
      specification: tosca-simple-nfv-1.0
      specification_section: ''
      specification_url: ''
    derived_from: tosca.capabilities.Node

  # tosca.capabilities.nfv.MonitoringParameter:
  #   # PJ NOTE: Added from NFV-IFA011
  #   _extensions:
  #     normative: true
  #     shorthand_name: MonitoringParameter
  #     type_qualified_name: tosca:MonitoringParameter
  #     specification: ETSI NFV IFA 011
  #     specification_section: 7.1.11
  #     specification_url: ''
  #   derived_from: tosca.capabilities.nfv.Metric
  #   description: >-
  #     Specifies the virtualised resource related performance metrics to be tracked by the VNFM.
  #   properties:
  #     # id:
  #     #   description: >-
  #     #     Unique identifier of the monitoring parameter.
  #     #   type: string
  #     #   required: true
  #     name:
  #       description: >-
  #         Human readable name of the monitoring parameter.
  #       type: string
  #       required: false
  #     performance_metric: # PJ NOTE: Need to define this to support more details!
  #       description: >-
  #         Identifies the virtualised resource performance metric.
  #       type: string
  #       required: true

  # tosca.capabilities.nfv.MonitoringParameters:
  #   # PJ NOTE: Added from NFV-IFA011, added as a list
  #   _extensions:
  #     normative: true
  #     shorthand_name: MonitoringParameter
  #     type_qualified_name: tosca:MonitoringParameter
  #     specification: ETSI NFV IFA 011
  #     specification_section: 7.1.11
  #     specification_url: ''
  #   derived_from: tosca.capabilities.nfv.Metric
  #   description: >-
  #     Specifies the virtualised resource related performance metrics to be tracked by the VNFM.
  #   properties:
  #     parameters:
  #       description: >-
  #         List of monitoring parameters that can be monitored.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.MonitoringParameter
  #
  # tosca.capabilities.nfv.NsDf:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsDf
  #     type_qualified_name: tosca:NsDf
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.3.2
  #     specification_url: ''
  #   derived_from: tosca.capabilities.Root
  #   description: >-
  #     The NsDf information element specifies the properties of a variant of an NS.
  #   properties:
  #     flavour_key:
  #       description: >-
  #         Assurance parameter against which this flavour is being described. The key
  #         can be a combination of multiple assurance parameters with a logical
  #         relationship between them. The parameters should be present as a
  #         monitoredInfo attribute in the NSD.
  #       type: string
  #       required: true
  #     vnf_profile:
  #       description: >-
  #         VNF profile to be used for the NS flavour.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.VnfProfile
  #       required: false
  #     # pnf_profile: TBD
  #     vl_profile:
  #       description: >-
  #         VL profile to be used for the NS flavour. There shall be at most one profile
  #         per constituent VNF.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.VirtualLinkProfile
  #       required: false
  #     scaling_aspect:
  #       description: >-
  #         The scaling aspects supported by this DF of the NS.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.NsScalingAspect
  #       required: false
  #     affinity_group:
  #       description: >-
  #         Specifies affinity or anti-affinity relationship applicable between the
  #         VNF instances created using different VNFDs, the Virtual Link instances
  #         created using different NsVirtualLinkDescs or the nested NS instances
  #         created using different NSDs in the same affinity or anti-affinity group.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.AffinityOrAntiAffinityPolicy
  #       required: false
  #     ns_instantiation_level:
  #       description: >-
  #         Describes the details of an NS level.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.NsLevel
  #       required: true
  #     default_ns_instantiation_level_id:
  #       description: >-
  #         Identifies the NS level which represents the default NS instantiation
  #         level for this DF. It shall be present if there are multiple
  #         "nsIinstantiationLevel" entries.
  #       type: string
  #       required: false
  #     ns_profile:
  #       description: >-
  #         Specifies a NS Profile supported by this NS DF.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.NsProfile
  #       required: false
  #     dependencies:
  #       description: >-
  #         Specifies the order in which instances of the VNFs and/or nested NSs
  #         have to be created.
  #       type: list
  #       entry_schema:
  #         type: tosca.datatypes.nfv.NsDependencies
  #       requied: false
  #
  # tosca.capabilities.nfv.MonitoredData:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: MonitoredData
  #     type_qualified_name: tosca:MonitoredData
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.2.6
  #     specification_url: ''
  #   derived_from: tosca.capabilities.Root
  #   description: >-
  #     The MonitoredData information element identifies information to be monitored
  #     during the lifetime of a network service instance.
  #   properties:
  #     vnf_indicator_info:
  #       description: >-
  #         Uniquely identifies this VNF Indicator information element.
  #       type: tosca.datatypes.nfv.VnfIndicatorData
  #       required: false
  #     monitoring_parameter:
  #       description: >-
  #         Specifies the virtualised resource related performance metric to be
  #         monitored on an NS level or VNF level. interface_types:
  #       type: tosca.datatypes.nfv.MonitoringParameter
  #       required: false

data_types:

  tosca.datatypes.nfv.L2AddressData:
    _extensions:
      normative: true
      shorthand_name: L2AddressData
      type_qualified_name: toscanfv:L2AddressData
      specification: ETSI SOL001 v0.6.0
      specification_section: 6.2.1
      specification_url: ''
    description: >-
      L2AddressData describes the information on the MAC addresses to be assigned to the
      connection point(s) instantiated from the parent Connection Point Descriptor.
    derived_from: tosca.datatypes.Root
    properties:
      mac_address_assignment:
        description: >-
          Specify if the address assignment is the responsibility of management and
          orchestration function or not. If it is set to True, it is the management
          and orchestration function responsibility.
        type: Boolean
        required: true

  tosca.datatypes.nfv.L3AddressData:
    _extensions:
      normative: true
      shorthand_name: L3AddressData
      type_qualified_name: toscanfv:L3AddressData
      specification: ETSI SOL001 v0.6.0 119r1
      specification_section: 6.2.2
      specification_url: ''
    description: >-
      The L3AddressData type is a complex TOSCA data type used to describe L3AddressData information
      element as defined in [ETSI GS NFV-IFA 011], it provides the information on the IP addresses
      to be assigned to the connection point instantiated from the parent Connection Point
      Descriptor.
    derived_from: tosca.datatypes.Root
    properties:
      ip_address_assignment:
        description: >-
          Specify if the address assignment is the responsibility of management and orchestration
          function or not. If it is set to True, it is the management and orchestration function
          responsibility.
        type: boolean
        required: true
      floating_ip_activated:
        description: Specify if the floating IP scheme is activated on the Connection Point or not.
        type: boolean
        required: true
      ip_address_type:
        description: >-
          Define address type. The address type should be aligned with the address type supported by
          the layer_protocol properties of the parent VnfExtCpd.
        type: string
        required: false
        constraints:
          - valid_values: [ ipv4, ipv6 ]
      number_of_ip_address:
        description: >-
          Minimum number of IP addresses to be assigned.
        type: integer
        required: false

  tosca.datatypes.nfv.AddressData:
    _extensions:
      normative: true
      shorthand_name: AddressData
      type_qualified_name: toscanfv:AddressData
      specification: ETSI SOL001 v0.6.0 119r1
      specification_section: 6.2.3
      specification_url: ''
    description: >-
      The AddressData type is a complex TOSCA data type used to describe AddressData information
      element as defined in [ETSI GS NFV-IFA 011], it provides information on the addresses to be
      assigned to the connection point(s) instantiated from a Connection Point Descriptor.
    derived_from: tosca.datatypes.Root
    properties:
      address_type:
        description: >-
          Describes the type of the address to be assigned to the connection point instantiated from
          the parent Connection Point Descriptor. The content type shall be aligned with the address
          type supported by the layerProtocol property of the parent Connection Point Descriptor.
        type: string
        required: true
        constraints:
          - valid_values: [ mac_address, ip_address ]
      l2_address_data:
        # Shall be present when the addressType is mac_address.
        description: >-
          Provides the information on the MAC addresses to be assigned to the connection point(s)
          instantiated from the parent Connection Point Descriptor.
        type: tosca.datatypes.nfv.L2AddressData
        required: false
      l3_address_data:
        # Shall be present when the addressType is ip_address.
        description: >-
          Provides the information on the IP addresses to be assigned to the connection point
          instantiated from the parent Connection Point Descriptor.
        type: tosca.datatypes.nfv.L3AddressData
        required: false

  tosca.datatypes.nfv.CpProtocolData:
    _extensions:
      normative: true
      shorthand_name: CpProtocolData
      type_qualified_name: toscanfv:CpProtocolData
      specification: ETSI NFV SOL001 v0.6.0
      specification_section: 6.2.31
      specification_url: ''
    description: >-
      The CpProtocolData type describes and associates the protocol layer that a CP uses together
      with other protocol and connection point information.
    derived_from: tosca.datatypes.Root
    properties:
      asscociated_layer_protocol:
        description: >-
          One of the values of the property layer_protocol of the Cpd.
        type: string
        constraints:
          - valid_values: [ethernet, mpls, odu2, ipv4, ipv6, pseudo-wire ]
        required: true
      address_data:
        description: >-
          Provides information on the addresses to be assigned to the CP(s) instantiated from the CPD.
        type: tosca.datatypes.nfv.AddressData
        required: false

  tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements:
    _extensions:
      normative: true
      shorthand_name: VirtualNetworkInterfaceRequirements
      type_qualified_name: toscanfv:VirtualNetworkInterfaceRequirements
      specification: ETSI SOL001 v0.6.0
      specification_section: 6.2.4
      specification_url: ''
    description: >-
      The VirtualNetworkInterfaceRequirements type is a complex TOSCA data type used to describe
      VirtualNetworkInterfaceRequirements information element as defined in [ETSI GS NFV-IFA 011],
      it provides the information to specify requirements on a virtual network interface realising the
      CPs instantiated from this CPD.
    derived_from: tosca.datatypes.Root
    properties:
      name:
        description: >-
          Provides a human readable name for the requirement.
        type: string
        required: false
      description:
        description: >-
          Provides a human readable description for the requirement.
        type: string
        required: false
      support_mandatory:
        description: >-
          Indicates whether fulfilling the constraint is mandatory (TRUE) for successful operation
          or desirable (FALSE).
        type: boolean
        required: true
      network_interface_requirements:  # PJ NOTE: updated from SOL001 46r2
        description: >-
          An element from an array of key-value pairs that articulate the network interface deployment requirements.
        type: map # PJ NOTE: the spec says "TBD", but TOSCA requires a type
        required: true
      nic_io_requirements:  # PJ NOTE: updated from SOL001 46r2
        description: >-
          This references (couples) the CPD with any logical node I/O requirements (for network
          devices) that may have been created. Linking these attributes is necessary so that so
          that I/O requirements that need to be articulated at the logical node level can be
          associated with the network interface requirements associated with the CPD.
        type: tosca.datatypes.nfv.LogicalNodeData
        required: false

  tosca.datatypes.nfv.LogicalNodeData:
    _extensions:
      normative: true
      shorthand_name: LogicalNodeData
      type_qualified_name: toscanfv:LogicalNodeData
      specification: ETSI NFV SOL001 v0.6.0
      specification_section: 6.2.32
      specification_url: ''
    description: >-
      LogicalNodeData describes logical node requirements associated with a particular VDU.
    derived_from: tosca.datatypes.Root
    properties:
      logical_node_requirements:
        type: map   # PJ NOTE: Currently marked as TBD in spec
        entry_schema:
          type: string
        required: false

  tosca.datatypes.nfv.ConnectivityType:
    _extensions:
      normative: true
      shorthand_name: ConnectivityType
      type_qualified_name: toscanfv:ConnectivityType
      specification: ETSI SOL001 v0.6.0
      specification_section: 6.2.5
      specification_url: ''
    description: >-
      The TOSCA ConnectivityType type is a complex TOSCA data type used to describe ConnectivityType
      information element as defined in [ETSI GS NFV-IFA 011].
    derived_from: tosca.datatypes.Root
    properties:
      layer_protocol:
        description: >-
          Identifies the protocol this VL gives access to (ethernet, mpls, odu2, ipv4, ipv6,
          pseudo_wire).
        type: string
        required: true
        constraints:
          - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo_wire ]
      flow_pattern:
        description: >-
          Identifies the flow pattern of the connectivity (Line, Tree, Mesh).
        type: string
        constriants:
          - valid_values: [ line, tree, mesh ]
        required: false

  tosca.datatypes.nfv.RequestedAdditionalCapability:
    _extensions:
      normative: true
      shorthand_name: RequestedAdditionalCapability
      type_qualified_name: toscanfv:RequestedAdditionalCapability
      specification: ETSI SOL001 v0.6.0 119r1
      specification_section: 6.2.6
      specification_url: 'http://docs.oasis-open.org/tosca/tosca-nfv/v1.0/csd04/tosca-nfv-v1.0-csd04.html#_Toc482896060'
    description: >-
      RequestAdditionalCapability describes additional capability for a particular VDU.
    derived_from: tosca.datatypes.Root
    properties:
      request_additional_capability_name:
        description: >-
          Identifies a requested additional capability for the VDU.
        type: string
        required: true
      support_mandatory:
        description: >-
          Indicates whether the requested additional capability is mandatory for successful
          operation.
        type: string
        required: true
      min_requested_additional_capability_version:
        description: >-
          Identifies the minimum version of the requested additional capability.
        type: string
        required: false
      preferred_requested_additional_capability_version:
        description: >-
          Identifies the preferred version of the requested additional capability.
        type: string
        required: false
      target_performance_parameters:
        description: >-
          Identifies specific attributes, dependent on the requested additional capability type.
        type: map
        entry_schema:
          type: string
        required: true

  tosca.datatypes.nfv.VirtualMemory:
    _extensions:
      normative: true
      shorthand_name: VirtualMemory
      type_qualified_name: toscanfv:VirtualMemory
      specification: ETSI SOL001 v0.6.0
      specification_section: 6.2.7
      specification_url: ''
    description: >-
      VirtualMemory describes virtual memory for a particular VDU.
    derived_from: tosca.datatypes.Root
    properties:
      virtual_mem_size:
        description: Amount of virtual memory.
        type: scalar-unit.size
        required: true
      virtual_mem_oversubscription_policy:
        description: >-
          The memory core oversubscription policy in terms of virtual memory to physical memory on
          the platform. The cardinality can be 0 during the allocation request, if no particular
          value is requested.
        type: string
        required: false
      numa_enabled:
        description: >-
          It specifies the memory allocation to be cognisant of the relevant process/core
          allocation.
        type: boolean
        required: false
      vdu_mem_requirements:  # PJ NOTE: Updated from SOL001 46r2
        description: >-
          Array of key-value pair requirements on the memory for the VDU.
        type: map
        entry_schema:
          type: string
        required: false

  tosca.datatypes.nfv.VirtualCpu:
    _extensions:
      normative: true
      shorthand_name: VirtualCpu
      type_qualified_name: toscanfv:VirtualCpu
      specification: ETSI SOL001 v0.6.0
      specification_section: 6.2.8
      specification_url: ''
    description: >-
      VirtualMemory describes virtual memory for a particular VDU.
    derived_from: tosca.datatypes.Root
    properties:
      cpu_architecture:
        description: >-
          CPU architecture type. Examples are x86, ARM.
        type: string
        required: false
      num_virtual_cpu:
        description: >-
          Number of virtual CPUs.
        type: integer
        required: true
      virtual_cpu_clock:
        description: >-
          Minimum virtual CPU clock rate.
        type: scalar-unit.frequency
        required: false
      virtual_cpu_oversubscription_policy:
        description: >-
          CPU core oversubscription policy.
        type: string
        required: false
      virtual_cpu_pinning:
        description: >-
          The virtual CPU pinning configuration for the virtualized compute resource.
        type: tosca.datatypes.nfv.VirtualCpuPinning
        required: false
      vdu_cpu_requirements:
        description: >-
          Array of key-value pair requirements on the Compute (CPU) for the VDU.
        type: map
        entry_schema:
          type: string
        required: false

  tosca.datatypes.nfv.VirtualCpuPinning:
    _extensions:
      normative: true
      shorthand_name: VirtualCpuPinning
      type_qualified_name: toscanfv:VirtualCpuPinning
      specification: ETSI SOL001 v0.6.0 119r1
      specification_section: 6.2.9
      specification_url: ''
    description: >-
      VirtualCpuPinning describes CPU pinning configuration for a particular CPU.
    derived_from: tosca.datatypes.Root
    properties:
      cpu_pinning_policy:
        description: >-
          Indicates the policy for CPU pinning.
        type: string
        constraints:
          - valid_values: [ static, dynamic ]
        required: false
      cpu_pinning_map:
        description: >-
          If cpuPinningPolicy is defined as "static", the cpuPinningMap provides the map of pinning
          virtual CPU cores to physical CPU cores/threads.
        type: map
        entry_schema:
          type: string
        required: false

  tosca.datatypes.nfv.VnfcConfigurableProperties:
    _extensions:
      normative: true
      shorthand_name: VnfcConfigurableProperties
      type_qualified_name: toscanfv:VnfcConfigurableProperties
      specification: ETSI SOL001 v0.6.0 119r1
      specification_section: 6.2.10
      specification_url: ''
    # ARIA NOTE: description is mangled in spec
    description: >-
      VnfcConfigurableProperties describes additional configurable properties of a VNFC.
    derived_from: tosca.datatypes.Root
    properties:
      additional_vnfc_configurable_properties:
        description: >-
          Describes additional configuration for VNFC.
        type: map
        entry_schema:
          type: string
        required: false

  tosca.datatypes.nfv.VduProfile:
    # PJ NOTE: Added from NFV-SOL001v0050, updated from 23r2
    _extensions:
      normative: true
      shorthand_name: VduProfile
      type_qualified_name: toscanfv:VduProfile
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.11
      specification_url: ''
    description: >-
      VduProfile describes additional instantiation data for a given VDU.Compute used in the a specific
      deployment flavour.
    properties:
      min_number_of_instances:
        description: >-
          Minimum number of instances of the VNFC based on this VDU.Compute that is permitted to exist
          for a particular VNF deployment flavour.
        type: integer
        required: true
      max_number_of_instances:
        description: >-
          Maximum number of instances of the VNFC based on this VDU.Compute that is permitted to exist
          for a particular VNF deployment flavour.
        type: integer
        required: true

  tosca.datatypes.nfv.VlProfile:
    _extensions:
      normative: true
      shorthand_name: VlProfile
      type_qualified_name: toscanfv:VlProfile
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.12
      specification_url: ''
    description: >-
      VlProfile describes additional instantiation data for a given VL used in a specific deployment flavour.
    derived_from: tosca.datatypes.Root
    properties:
      max_bit_rate_requirements:
        description: >-
          Specifies the maximum bitrate requirements for a VL instantiated according to this profile.
        type: tosca.datatypes.nfv.LinkBitrateRequirements
        required: true
      min_bit_rate_requirements:
        description: >-
          Specifies the minimum bitrate requirements for a VL instantiated according to this profile.
        type: tosca.datatypes.nfv.LinkBitrateRequirements
        required: true
      qos:
        description: >-
          Specifies the QoS requirements of a VL instantiated according to this profile.
        type: tosca.datatypes.nfv.Qos
        required: false

  tosca.datatypes.nfv.InstantiationLevel:
    _extensions:
      normative: true
      shorthand_name: InstantiationLevel
      type_qualified_name: toscanfv:InstantiationLevel
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.13
      specification_url: ''
    description: >-
      InstantiationLevel type describes a given level of resources to be instantiated within a deployment
      flavour in term of the number VNFC instances to be created for each VDU.Compute.
    derived_from: tosca.datatypes.Root
    properties:
      description:
        description: >-
          Human readable description of the level.
        type: string
        required: true
      vdu_levels:
        description: >-
          Indicates the number of instance of this VDU to deploy for this level.
        type: map # key: vduId
        entry_schema:
          type: tosca.datatypes.nfv.VduLevel
        required: true
      scale_info:
        description: >-
          Represents for each aspect the scale level that corresponds to this instantiation level.
          scaleInfo shall be present if the VNF supports scaling.
        type: map # key: aspectId
        entry_schema:
          type: tosca.datatypes.nfv.ScaleInfo
        required: false

  tosca.datatypes.nfv.VduLevel:
    _extensions:
      normative: true
      shorthand_name: VduLevel
      type_qualified_name: toscanfv:VduLevel
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.14
      specification_url: ''
    description: >-
      VduLevel type indicates for a given VDU.Compute in a given level the number of instances to deploy.
    derived_from: tosca.datatypes.Root
    properties:
      number_of_instances:
        description: >-
          Number of instances of VNFC based on this VDU to deploy for this level.
        type: integer
        required: true

  tosca.datatypes.nfv.VnfLcmOperationsConfiguration:
    _extensions:
      normative: true
      shorthand_name: VduLevel
      type_qualified_name: tosca:VduLevel
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.15
      specification_url: ''
    description: >-
      VnfLcmOperationsConfiguration represents information to configure lifecycle management operations
      as specified in [ETSI GS NFV-IFA 007].
    derived_from: tosca.datatypes.Root
    properties:
      instantiate:
        description: >-
          Configuration parameters for the InstantiateVnf operation.
        type: tosca.datatypes.nfv.VnfInstantiateOperationConfiguration
        required: false
      scale:
        description: >-
          Configuration parameters for the ScaleVnf operation.
        type: tosca.datatypes.nfv.VnfScaleOperationConfiguration
        required: false
      scale_to_level:
        description: >-
          Configuration parameters for the ScaleVnfToLevel operation.
        type: tosca.datatypes.nfv.VnfScaleToLevelOperationConfiguration
        required: false
      heal:
        description: >-
          Configuration parameters for the HealVnf operation.
        type: tosca.datatypes.nfv.VnfHealOperationConfiguration
        required: false
      terminate:
        description: >-
          Configuration parameters for the TerminateVnf operation.
        type: tosca.datatypes.nfv.VnfTerminateOperationConfiguration
        required: false
      operate:
        description: >-
          Configuration parameters for the OperateVnf operation.
        type: tosca.datatypes.nfv.VnfOperateOperationConfiguration
        required: false

  tosca.datatypes.nfv.VnfInstantiateOperationConfiguration:
    _extensions:
      normative: true
      shorthand_name: VnfInstantiateOperationConfiguration
      type_qualified_name: toscanfv:VnfInstantiateOperationConfiguration
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.16
      specification_url: ''
    description: >-
      VnfInstantiateOperationConfiguration represents information that affect the invocation of the
      InstantiateVnf operation.
    derived_from: tosca.datatypes.Root
    properties:
      # PJ NOTE: Commented out in the SOL 001 definition
      parameter:
        # modeled as part of operation parameter list
        description: >-
          VNF-specific parameter to be passed when invoking the InstantiateVnf operation.
        type: map # PJ NOTE: Type not specified in spec
        required: false

  tosca.datatypes.nfv.VnfScaleOperationConfiguration:
    _extensions:
      normative: true
      shorthand_name: VnfScaleOperationConfiguration
      type_qualified_name: toscanfv:VnfScaleOperationConfiguration
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.17
      specification_url: ''
    description: >-
      VnfScaleOperationConfiguration represents information that affect the invocation of the ScaleVnf operation.
    derived_from: tosca.datatypes.Root
    properties:
      # PJ NOTE: Commented out in the SOL 001 definition
      parameter:
        # modeled as part of operation parameter list
        description: >-
          VNF-specific parameter to be passed when invoking the ScaleVnf operation.
        type: map # PJ NOTE: Type not specified in spec
        required: false
      scaling_by_more_than_one_step_supported:
        description: >-
          Signals whether passing a value larger than one in the numScalingSteps parameter of the ScaleVnf
          operation is supported by this VNF.
          Default is FALSE, i.e. "not supported".
        type: boolean
        required: false

  tosca.datatypes.nfv.VnfScaleToLevelOperationConfiguration:
    _extensions:
      normative: true
      shorthand_name: VnfScaleToLevelOperationConfiguration
      type_qualified_name: toscanfv:VnfScaleToLevelOperationConfiguration
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.18
      specification_url: ''
    description: >-
      VnfScaleToLevelOperationConfiguration represents information that affect the invocation of the
      ScaleVnfToLevel operation.
    derived_from: tosca.datatypes.Root
    properties:
      # PJ NOTE: Commented out in the SOL 001 definition
      parameter:
        # modeled as part of operation parameter list
        description: >-
          VNF-specific parameter to be passed when invoking the ScaleVnfToLevel operation.
        type: map # PJ NOTE: Type not specified in spec
        required: false
      arbitrary_target_levels_supported:
        description: >-
          Signals whether scaling according to the parameter "scaleInfo" is supported by this VNF.
        type: boolean
        required: false

  tosca.datatypes.nfv.VnfHealOperationConfiguration:
    _extensions:
      normative: true
      shorthand_name: VnfHealOperationConfiguration
      type_qualified_name: toscanfv:VnfHealOperationConfiguration
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.19
      specification_url: ''
    description: >-
      VnfHealOperationConfiguration represents information that affect the invocation of the
      HealVnf operation.
    derived_from: tosca.datatypes.Root
    properties:
      # PJ NOTE: Commented out in the SOL 001 definition
      parameter:
        # modeled as part of operation parameter list
        description: >-
          VNF-specific parameter to be passed when invoking the HealVnf operation.
        type: map # PJ NOTE: Type not specified in spec
        required: false
      cause:
        description: >-
          Supported "cause" parameter values.
        type: list
        entry_schema:
          type: string
        required: false

  tosca.datatypes.nfv.VnfTerminateOperationConfiguration:
    _extensions:
      normative: true
      shorthand_name: VnfTerminateOperationConfiguration
      type_qualified_name: toscanfv:VnfTerminateOperationConfiguration
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.20
      specification_url: ''
    description: >-
      VnfTerminateOperationConfiguration represents information that affect the invocation of the
      TerminateVnf operation.
    derived_from: tosca.datatypes.Root
    properties:
      min_graceful_termination_timeout:
        description: >-
          Minimum timeout value for graceful termination of a VNF instance.
        type: integer
        required: true
      max_recommended_graceful_termination_timeout:
        description: >-
          Maximum recommended timeout value that can be needed to gracefully terminate a VNF instance
          of a particular type under certain conditions, such as maximum load condition. This is
          provided by VNF provider as information for the operator facilitating the selection of
          optimal timeout value. This value is not used as constraint.
        type: integer
        required: false
      # PJ NOTE: Not specified in the SOL 001 definition
      parameter:
        # modeled as part of operation parameter list
        description: >-
          VNF-specific parameter to be passed when invoking the TerminateVnf operation.
        type: map # PJ NOTE: Type not specified in spec
        required: false

  tosca.datatypes.nfv.VnfOperateOperationConfiguration:
    _extensions:
      normative: true
      shorthand_name: VnfOperateOperationConfiguration
      type_qualified_name: toscanfv:VnfOperateOperationConfiguration
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.21
      specification_url: ''
    description: >-
      VnfOperateOperationConfiguration represents information that affect the invocation of the
      OperateVnf operation.
    derived_from: tosca.datatypes.Root
    properties:
      min_graceful_stop_timeout:
        description: >-
          Minimum timeout value for graceful stop of a VNF instance.
        type: integer
        required: true
      max_recommended_graceful_stop_timeout:
        description: >-
          Maximum recommended timeout value that can be needed to gracefully terminate a VNF instance
          of a particular type under certain conditions, such as maximum load condition. This is
          provided by VNF provider as information for the operator facilitating the selection of
          optimal timeout value. This value is not used as constraint.
        type: integer
        required: false
      # PJ NOTE: Not specified in the SOL 001 definition
      parameter:
        # modeled as part of operation parameter list
        description: >-
          VNF-specific parameter to be passed when invoking the OperateVnf operation.
        type: map # PJ NOTE: Type not specified in spec
        required: false

  # tosca.datatypes.nfv.VnfChangeFlavourOpConfig:
  #   # PJ NOTE: Added from NFV-IFA011
  #   _extensions:
  #     normative: true
  #     shorthand_name: VnfChangeFlavourOpConfig
  #     type_qualified_name: tosca:VnfChangeFlavourOpConfig
  #     specification: ETSI NFV IFA 011
  #     specification_section: 7.1.5.9
  #     specification_url: ''
  #   description: >-
  #     VnfChangeFlavourOpConfig represents information that affect the invocation of the
  #     ChangeVnfFlavour operation.
  #   derived_from: tosca.datatypes.Root
  #   properties:
  #     parameter:
  #       # modeled as part of operation parameter list
  #       description: >-
  #         VNF-specific parameter to be passed when invoking the ChangeVnfFlavour operation.
  #       type: map # PJ NOTE: Type not specified in spec
  #       required: false
  #
  # tosca.datatypes.nfv.VnfChangeExtConnectivityOpConfig:
  #   # PJ NOTE: Added from NFV-IFA011
  #   _extensions:
  #     normative: true
  #     shorthand_name: VnfChangeExtConnectivityOpConfig
  #     type_qualified_name: tosca:VnfChangeExtConnectivityOpConfig
  #     specification: ETSI NFV IFA 011
  #     specification_section: 7.1.5.10
  #     specification_url: ''
  #   description: >-
  #     VnfChangeExtConnectivityOpConfig represents information that affect the invocation of the
  #     ChangeExtVnfConnectivity operation.
  #   derived_from: tosca.datatypes.Root
  #   properties:
  #     parameter:
  #       # modeled as part of operation parameter list
  #       description: >-
  #         VNF-specific parameter to be passed when invoking the ChangeExtVnfConnectivity operation.
  #       type: map # PJ NOTE: Type not specified in spec
  #       required: false

  tosca.datatypes.nfv.ScaleInfo:
    _extensions:
      normative: true
      shorthand_name: ScaleInfo
      type_qualified_name: toscanfv:ScaleInfo
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.22
      specification_url: ''
    description: >-
      The scaleInfo indicates for a given scaleAspect the corresponding scaleLevel.
    derived_from: tosca.datatypes.Root
    properties:
      scaleLevel:
        description: >-
          The scale level for a particular aspect.
        type: integer
        required: true

  tosca.datatypes.nfv.ScalingAspect:
    _extensions:
      normative: true
      shorthand_name: ScalingAspect
      type_qualified_name: toscanfv:ScalingAspect
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.23
      specification_url: ''
    description: >-
      ScalingAspect describes the details of an aspect used for horizontal scaling.
    derived_from: tosca.datatypes.Root
    properties:
      name:
        description: >-
          Human readable name of the aspect.
        type: string
        required: true
      description:
        description: >-
          Human readable description of the aspect.
        type: string
        required: true
      associated_group:
        description: >-
          Reference to the group of Vnfd elements defining this aspect.
        type: string # Identifier
        required: false
      max_scale_level:
        description: >-
          Total number of scaling steps that can be applied w.r.t. this aspect. The value of
          this property corresponds to the number of scaling steps can be applied to this
          aspect when scaling it from the minimum scale level (i.e. 0) to the maximum scale
          level defined by this property.
        type: integer # PositiveInteger
        required: true

  # tosca.datatypes.nfv.VnfdElementGroup:
  #   # PJ NOTE: Added from NFV-IFA011
  #   _extensions:
  #     normative: true
  #     shorthand_name: VnfdElementGroup
  #     type_qualified_name: tosca:VnfdElementGroup
  #     specification: ETSI NFV IFA 011
  #     specification_section: 7.1.4
  #     specification_url: ''
  #   description: >-
  #     A VNFD Element Group is a mechanism for associating elements of a VNFD (Vdus and
  #     VnfVirtualLinkDesc(s)) for a certain purpose, for example, scaling aspects.
  #   derived_from: tosca.datatypes.Root
  #   properties:
  #     vnfdElementGroupId:
  #       description: >-
  #         Unique identifier of this group in the VNFD.
  #       type: string
  #       required: true
  #     description:
  #       description: >-
  #         Human readable description of the group.
  #       type: string
  #       required: true
  #     vdu:
  #       description: >-
  #         References to Vdus that are part of this group.
  #       type: list
  #       entry_schema:
  #         type: string # VDU IDs
  #       required: true
  #     virtualLinkDesc:
  #       description: >-
  #         References to VnfVirtualLinkDesc that are part of this group.
  #       type: list
  #       entry_schema:
  #         type: string # VNF VL IDs
  #       required: true
  #

  tosca.datatypes.nfv.LinkBitrateRequirements:
    _extensions:
      normative: true
      shorthand_name: LinkBitrateRequirements
      type_qualified_name: toscanfv:LinkBitrateRequirements
      specification: ETSI NFV SOL001 v0.6.0
      specification_section: 6.2.24
      specification_url: ''
    derived_from: tosca.datatypes.Root
    description: >-
      The LinkBitrateRequirements information element describes the requirements in terms
      of bitrate for a VL.
    properties:
      root:
        description: >-
          Throughput requirement of the link (e.g. bitrate of E-Line, root bitrate of
          E-Tree, aggregate capacity of E-LAN).
        type: integer
        required: true
      leaf:
        description: >-
          Throughput requirement of leaf connections to the link when applicable to the
          connectivity type (e.g. for E-Tree and E-LAN branches).
        type: integer
        required: false

  tosca.datatypes.nfv.Qos:
    _extensions:
      normative: true
      shorthand_name: Qos
      type_qualified_name: toscanfv:Qos
      specification: ETSI NFV SOL001 v0.6.0
      specification_section: 6.2.25
      specification_url: ''
    derived_from: tosca.datatypes.Root
    description: >-
      The QoS information element describes QoS data for a given VL used in a DF.
    properties:
      latency:
        description: >-
          Specifies the maximum latency in ms.
        type: integer  # in ms
        required: true
      packet_delay_variation:
        description: >-
          Specifies the maximum jitter in ms.
        type: integer  # in ms
        required: true
      packet_loss_ratio:
        description: >-
          Specifies the maximum packet loss ratio.
        type: scalar   # number between 0 and 1
        required: false

  # tosca.datatypes.nfv.NsVlQoS:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsQoS
  #     type_qualified_name: tosca:NsQoS
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.5.6
  #     specification_url: ''
  #   derived_from: tosca.datatypes.nfv.QoS
  #   description: >-
  #     The QoS information element specifies quality of service parameters applicable to a VL.
  #   properties:
  #     priority:
  #       description: >-
  #         Specifies the priority level in case of congestion on the underlying physical links.
  #       type: integer
  #       required: false
  #
  # tosca.datatypes.nfv.VlFlavour:
  #   # PJ NOTE: Added from IFA011
  #   _extensions:
  #     normative: true
  #     shorthand_name: VlFlavour
  #     type_qualified_name: tosca:VlFlavour
  #     specification: ETSI NFV IFA 011
  #     specification_section: 7.1.8.5
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The VirtualLinkDescFlavour describes additional instantiation data for
  #     a given internal VL used in a DF.
  #   properties:
  #     bitrate_requirements:
  #       description: >-
  #         Bitrate requirements for a VL created from this VirtualLinkDescFlavour.
  #       type: tosca.datatypes.nfv.LinkBitrateRequirements
  #       required: false
  #     qos:
  #       description: >-
  #         QoS of the VL.
  #       type: tosca.datatypes.nfv.QoS
  #       required: false
  #
  # tosca.datatypes.nfv.VirtualLinkDf:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: VirtualLinkDf
  #     type_qualified_name: tosca:VirtualLinkDf
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.5.4
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The VirtualLinkDf information element specifies properties for instantiating a VL
  #     according to a specific flavour.
  #   properties:
  #     qos:
  #       description: >-
  #         QoS of the VL.
  #       type: tosca.datatypes.nfv.NsVlQoS
  #       required: false
  #     service_avaibility+level:
  #       description: >-
  #         Specifies one of the three levels defined in ETSI GS NFV-REL 001.
  #       type: string
  #       constraints:
  #         -valid_values: [ 'Level 1', 'Level 2', 'Level 3' ]
  #       required: false
  #
  # tosca.datatypes.nfv.SecurityParameters:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: SecurityParameters
  #     type_qualified_name: tosca:SecurityParameters
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.2.5
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The SecurityParameters information element contains the signature of a NSD, VLD,
  #     PNFD or VNFFGD instance together with information required to validate the signature.
  #   properties:
  #     signature:
  #       description: >-
  #         Provides the signature of the signed part of the descriptor.
  #       type: string
  #       required: true
  #     algorithm:
  #       description: >-
  #         Identifies the algorithm used to compute the signature.
  #       type: string
  #       required: true
  #     certificate:
  #       description: >-
  #         Provides a certificate or a reference to a certificate to validate the signature.
  #       type: string  # PJ NOTE: Spec says not specified.
  #       required: false
  #
  # tosca.datatypes.nfv.VnfToLevelMapping:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: VnfToLevelMapping
  #     type_qualified_name: tosca:VnfToLevelMapping
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.7.4
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The VnfToLevelMapping information element specifies the profile to be used for
  #     a VNF involved in a given NS level and the required number of instances.
  #   properties:
  #     # vnf_profile_id:
  #     #   description: >-
  #     #     Identifies the profile to be used for a VNF involved in the NS level.
  #     #   type: string
  #     #   required: true
  #     number_of_instances:
  #       description: >-
  #         Specifies the number of VNF instances required for the NS scale level.
  #       type: integer
  #       required: true
  #
  # tosca.datatypes.nfv.VirtualLinkToLevelMapping:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: VirtualLinkToLevelMapping
  #     type_qualified_name: tosca:VirtualLinkToLevelMapping
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.7.5
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The VirtualLinkToLevelMapping information element specifies the profile to be
  #     used for a VL involved in a given NS level and bitrate requirements.
  #   properties:
  #     # vl_profile_id:
  #     #   description: >-
  #     #     Identifies the profile to be used for a VL involved in the NS level.
  #     #   type: string
  #     #   required: true
  #     bit_rate_requirements:
  #       description: >-
  #         Specifies the bit rate requirements for the NS level.
  #       type: tosca.datatypes.nfv.LinkBitrateRequirements
  #       required: true
  #
  # tosca.datatypes.nfv.NsToLevelMapping:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsToLevelMapping
  #     type_qualified_name: tosca:NsToLevelMapping
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.7.6
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The NsToLevelMapping information element specifies the profile to be used for a nested
  #     NS involved in a given NS level and the required number of instances.
  #   properties:
  #     # ns_profile_id:
  #     #   description: >-
  #     #     Identifies the profile to be used for a nested NS involved in the NS level.
  #     #   type: string
  #     #   required: true
  #     number_of_instances:
  #       description: >-
  #         Specifies the number of nested NS instances required for the NS scale level.
  #       type: integer
  #       required: true
  #
  # tosca.datatypes.nfv.NsLevel:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsLevel
  #     type_qualified_name: tosca:NsLevel
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.3.9
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The NsLevel information element describes the details of an NS level. An NS level
  #     consists of a list of involved entities, i.e. VNFs, VLs and/or nested NSs.
  #   properties:
  #     description:
  #       description: >-
  #         Human readable description of the NS level.
  #       type: string
  #       required: true
  #     vnf_to_level_mapping:
  #       description: >-
  #         Specifies the profile of the VNFs involved in ping this NS level and,
  #         for each of them, the required number of instances.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.VnfToLevelMapping
  #       required: false
  #     vl_to_level_mapping:
  #       description: >-
  #         Specifies the profile of the VLs involved in this NS level and, for
  #         each of them, the needed bandwidth.
  #          for each of them, the required number of instances. type: map
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.VirtualLinkToLevelMapping
  #       required: false
  #     ns_to_level_mapping:
  #       description: >-
  #         Specifies the profile of the nested NSs involved in this NS level and,
  #         for each of them, the required number of instances.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.NsToLevelMapping
  #       required: false

  # tosca.datatypes.nfv.AffinityOrAntiAffinityPolicy:
  #   # PJ NOTE: Added from IFA011/IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: AffinityOrAntiAffinityPolicy
  #     type_qualified_name: tosca:AffinityOrAntiAffinityPolicy
  #     specification: ETSI NFV IFA 011
  #     specification_section: 7.1.8.12
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The LocalAffinityOrAntiAffinityRule describes the affinity or anti-affinity rule
  #     applicable between the virtualization containers, or between internal VLs
  #   properties:
  #     type:
  #       description: >-
  #         Specifies whether the rule is an affinity rule or an anti-affinity rule.
  #       type: string
  #       constraints:
  #         - valid_values: [ 'affinity', 'anti-affinity' ]
  #       required: true
  #     scope:
  #       description: >-
  #         Specifies the scope of the rule, possible values are "NFVI-PoP", "Zone",
  #         "ZoneGroup", "NFVI-node".
  #       type: string
  #       constraints:
  #         - valid_values: [ '"NFVI-PoP', 'Zone', 'ZoneGroup', 'NFVI-node' ]
  #       required: true

  # tosca.datatypes.nfv.NsVirtualLinkConnectivity:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsVirtualLinkConnectivity
  #     type_qualified_name: tosca:NsVirtualLinkConnectivity
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.3.7
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The NsVirtuallLinkConnectivity information element describes connection
  #     information between a connection point and a NS virtual Link.
  #   properties:
  #     virtual_link_profile_id:
  #       description: >-
  #         Reference an NS VL profile.
  #       type: string
  #       required: true
  #     cpd_id:
  #       description: >-
  #         References the descriptor of a connection point on a VNF/PNF or a SAP
  #         which connects to virtual links instantiated from the profile identified
  #         in the virtualLinkProfileId attribute.
  #       type: list
  #       constraints:
  #         - min_length: 1
  #       required: true
  #
  # tosca.datatypes.nfv.NsDependencies:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsVirtualLinkConnectivity
  #     type_qualified_name: tosca:NsVirtualLinkConnectivity
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.3.7
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The Dependencies information element provides indications on the order in
  #     which VNFs associated to different VNF Profiles and/or nested NSs associated
  #     to different NS Profiles are to be instantiated.
  #   properties:
  #     primary_id:
  #       description: >-
  #         References a VnfProfile or NsProfile.
  #       type: list
  #       required: true
  #     secondary_id:
  #       description: >-
  #         References a VnfProfile or NsProfile.
  #       type: list
  #       required: true
  #
  # tosca.datatypes.nfv.NsProfile:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsProfile
  #     type_qualified_name: tosca:NsProfile
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.3.11
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The NsProfile information element specifies the profile to be used for a nested NS.
  #   properties:
  #     nsd_id:
  #       description: >-
  #         Identifies the NSD applicable to NS instantiated according to this profile.
  #       type: string
  #       required: true
  #     ns_df_id:
  #       description: >-
  #         Identifies the applicable network service DF within the scope of the NSD.
  #       type: string
  #       required: true
  #     ns_instantiation_level_id:
  #       description: >-
  #         Identifies the NS level within the referenced NS DF to be used in the context
  #         of the parent NS instantiation. If not present, the default NS instantiation
  #         level as declared in the referenced NSD shall be used.
  #       type: string
  #       required: false
  #     min_number_of_instances:
  #       description: >-
  #         Minimum number of nested NS instances based on the referenced NSD that is
  #         permitted to exist for this NsProfile.
  #       type: integer
  #       required: true
  #     max_number_of_instances:
  #       description: >-
  #         Maximum number of nested NS instances based on the referenced NSD that is
  #         permitted to exist for this NsProfile.
  #       type: integer
  #       required: true
  #     affinity_or_antiaffinity_group_id:
  #       description: >-
  #         Identifies an affinity or anti-affinity group the NSs created according to
  #         this NsProfile belong to.
  #       type: list
  #       required: false
  #
  # tosca.datatypes.nfv.NsScalingAspect:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsScalingAspect
  #     type_qualified_name: tosca:NsScalingAspect
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.7.2
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The NsScalingAspect information element describes the details of an NS scaling
  #     aspect. An NS scaling aspect is an abstraction representing a particular
  #     "dimension" or "property" along which a given NS can be scaled.
  #   properties:
  #     name:
  #       description: >-
  #         Provides a human readable name of the NS scaling aspect.
  #       type: string
  #       req`: true
  #     description:
  #       description: >-
  #         Provides a human readable description of the NS scaling aspect.
  #       type: string
  #       required: true
  #     ns_scale_level:
  #       description: >-
  #         Describes the details of an NS level.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.NsLevel
  #       required: true
  #
  # tosca.datatypes.nfv.VirtualLinkProfile:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: VirtualLinkProfile
  #     type_qualified_name: tosca:VirtualLinkProfile
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.3.4
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The VirtualLinkProfile information element specifies a profile for instantiating
  #     VLs of a particular NS DF according to a specific VLD and VL DF.
  #   properties:
  #     vld_id:
  #       description: >-
  #         Uniquely references a VLD.
  #       type: string
  #       required: true
  #     flavour_id:
  #       description: >-
  #         Identifies a flavour within the VLD.
  #       type: string
  #       required: true
  #     local_affinity_rule:
  #       description: >-
  #         Specifies affinity and anti-affinity rules applicable between VLs instantiated
  #         from the referenced VLD.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.AffinityOrAntiAffinityPolicy
  #       required: false
  #     affinity_group_id:
  #       description: >-
  #         Identifies an affinity or anti-affinity group the VLs instantiated according
  #         to the VlProfile belong to.
  #       type: list
  #       required: false
  #     max_bit_rate_requirements:
  #       description: >-
  #         Specifies the maximum bitrate requirements for a VL instantiated according
  #         to this profile.
  #       type: tosca.datatypes.nfv.LinkBitrateRequirements
  #       required: true
  #     mix_bit_rate_requirements:
  #       description: >-
  #         Specifies the minimum bitrate requirements for a VL instantiated according
  #         to this profile.
  #       type: tosca.datatypes.nfv.LinkBitrateRequirements
  #       required: true
  #
  # tosca.datatypes.nfv.VnfProfile:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: VnfProfile
  #     type_qualified_name: tosca:VnfProfile
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.3.3
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The VnfProfile information element specifies a profile for instantiating VNFs of
  #     a particular NS DF according to a specific VNFD and VNF DF.
  #   properties:
  #     vnfd_id:
  #       description: >-
  #         Uniquely references a VNFD.
  #       type: string
  #       required: true
  #     flavour_id:
  #       description: >-
  #         Identifies a flavour within the VNFD.
  #       type: string
  #       required: true
  #     instantiation_level:
  #       description: >-
  #         Identifier of the instantiation level of the VNF DF to be used for instantiation.
  #         If not present, the default instantiation level as declared in the VNFD shall be
  #         used.
  #       type: string
  #       required: false
  #     min_number_of_instances:
  #       description: >-
  #         Minimum number of instances of the VNF based on this VNFD that is permitted to
  #         exist for this VnfProfile.
  #       type: integer
  #       required: true
  #     max_number_of_instances:
  #       description: >-
  #         Maximum number of instances of the VNF based on this VNFD that is permitted to
  #         exist for this VnfProfile.
  #       type: integer
  #       required: true
  #     local_affinity_rule:
  #       description: >-
  #         Specifies affinity and anti-affinity rules applicable between VLs instantiated
  #         from the referenced VLD.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.AffinityOrAntiAffinityPolicy
  #       required: false
  #     affinity_group_id:
  #       description: >-
  #         Identifies an affinity or anti-affinity group the VLs instantiated according
  #         to the VlProfile belong to.
  #       type: list
  #       required: false
  #     ns_vl_connectivity:
  #       description: >-
  #         Defines the connection information of the VNF, it contains connection
  #         relationship between a VNF connection point and a NS virtual Link.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.NsVirtualLinkConnectivity
  #       required: true
  #
  # tosca.datatypes.nfv.Nfpd:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: Nfpd
  #     type_qualified_name: tosca:Nfpd
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.4.3
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The Nfpd information element associates traffic flow criteria to a list of
  #     descriptors associated to the connection points and service access points
  #     to be visited by traffic flows matching these criteria.
  #   properties:
  #     nfp_rule: # PJ NOTE: Need to define this properly!
  #       description: >-
  #         Provides an NFP classification and selection rule. The rule may be expressed
  #         as a criteria constructed out of atomic assertions linked by Boolean operators
  #         AND, OR and NOT.
  #       type: string
  #       required: false
  #     cpd:
  #       description: >-
  #         References the descriptor of a connection point to be traversed by the traffic
  #         flows matching the criteria. This shall be a connection point attached to one
  #         of the constituent VNFs and PNFs of the parent VNFFG, or a SAP of one of the
  #         constituent nested NSs of the parent VNFFG.
  #       type: list
  #       required: true
  #
  # tosca.datatypes.nfv.VnfIndicatorData:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: VnfIndicatorData
  #     type_qualified_name: tosca:VnfIndicatorData
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.2.7
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     The VnfIndicatorData information identifies a VNF indicator in a VNFD.
  #   properties:
  #     vnfd_id:
  #       description: >-
  #         Identifies a VNFD.
  #       type: string
  #       required: true
  #     vnf_indicator:
  #       description: >-
  #         Identifies a VNF indicator within the VNFD.
  #       type: string
  #       required: true

  # tosca.datatypes.nfv.security_rule:
  #   # PJ NOTE: Not in specs.
  #   _extensions:
  #     normative: true
  #     shorthand_name: security_rule
  #     type_qualified_name: tosca:security_rule
  #     specification:
  #     specification_section:
  #     specification_url: ''
  #   derived_from: tosca.datatypes.Root
  #   description: >-
  #     Rule definition for a security group.
  #   properties:
  #     description:
  #       description: >-
  #         Human readable description of the rule.
  #       type: string
  #       required: false
  #     packet_direction:
  #       description: >-
  #         Direction of traffic w.r.t VM.
  #       type: string
  #       constraints:
  #         - valid_values: [ 'INGRESS', 'EGRESS' ]
  #       required: true
  #     ip_version:
  #       description: >-
  #         Version of IP used.
  #       type: string
  #       constraints:
  #         - valid_values: [ 'ipv4', 'ipv6' ]
  #       required: true
  #     ip_protocol:
  #       description: >-
  #         "IP protocol, 0-255".
  #       type: integer
  #       constraints:
  #         - in_range: [ 0, 255 ]
  #       required: true
  #     port_range_min:
  #       description: >-
  #         "Minimum port number in the range 0-65535".
  #       type: integer
  #       constraints:
  #         - in_range: [ 0, 65535 ]
  #       required: true
  #     port_range_max:
  #       description: >-
  #         "Maximum port number in the range 0-65535".
  #       type: integer
  #       constraints:
  #         - in_range: [ 0, 65535 ]
  #       required: true
  #     source_address_cidr:
  #       description: >-
  #         Source CIDR of the packets.
  #       type: string
  #       required: false

  tosca.datatypes.nfv.VnfConfigurableProperties:
    _extensions:
      normative: true
      shorthand_name: VnfConfigurableProperties
      type_qualified_name: toscanfv:VnfConfigurableProperties
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.26
      specification_url: ''
    description: >-
      Describes the configurable properties of the VNF (e.g. related to auto scaling and auto healing).
    derived_from: tosca.datatypes.Root
    properties:
      is_autoscale_enabled:
        description: >-
          It permits to enable (TRUE)/disable (FALSE) the auto-scaling functionality. If the properties
          is not present for configuring, then VNF property is not supported.
        type: boolean
        required: false
      is_autoheal_enabled:
        description: >-
          It permits to enable (TRUE)/disable (FALSE) the auto-healing functionality. If the properties
          is not present for configuring, then VNF property is not supported.
        type: boolean
        required: false
      additional_configurable_properties:
        description: >-
          It provides VNF specific configurable properties that can be modified using the ModifyVnfInfo
          operation.
        type: tosca.datatypes.nfv.VnfAdditionalConfigurableProperties
        required: false

  tosca.datatypes.nfv.VnfAdditionalConfigurableProperties:
    _extensions:
      normative: true
      shorthand_name: VnfAdditionalConfigurableProperties
      type_qualified_name: toscanfv:VnfAdditionalConfigurableProperties
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.27
      specification_url: ''
    description: >-
      VNF specific configurable properties that can be modified using the ModifyVnfInfo.
    derived_from: tosca.datatypes.Root

  tosca.datatypes.nfv.VnfInfoModifiableAttributes:
    _extensions:
      normative: true
      shorthand_name: VnfInfoModifiableAttributes
      type_qualified_name: tosca:VnfInfoModifiableAttributes
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.28
      specification_url: ''
    description: >-
      Describes the modifiable attributes of the VNF.
    derived_from: tosca.datatypes.Root
    properties:
      extensions:
        description: >-
          "Extension" properties of VnfInfo that are writeable.
        type: tosca.datatypes.nfv.VnfInfoModifiableAttributesExtensions
        required: false
      metadata:
        description: >-
          "Metadata" properties of VnfInfo that are writeable.
        type: tosca.datatypes.nfv.VnfInfoModifiableAttributesMetadata
        required: false

  tosca.datatypes.nfv.VnfInfoModifiableAttributesExtensions:
    _extensions:
      normative: true
      shorthand_name: VnfInfoModifiableAttributesExtensions
      type_qualified_name: tosca:VnfInfoModifiableAttributesExtensions
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.29
      specification_url: ''
    description: >-
      "Extension" properties of VnfInfo that are writeable.
    derived_from: tosca.datatypes.Root

  tosca.datatypes.nfv.VnfInfoModifiableAttributesMetadata:
    _extensions:
      normative: true
      shorthand_name: VnfInfoModifiableAttributesMetadata
      type_qualified_name: toscanfv:VnfInfoModifiableAttributesMetadata
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.2.30
      specification_url: ''
    description: >-
      "Metadata" properties of VnfInfo that are writeable.
    derived_from: tosca.datatypes.Root

  tosca.datatypes.nfv.SwImage:
    _extensions:
      normative: true
      shorthand_name: SwImageData
      type_qualified_name: toscanfv:SwImageData
      specification: ETSI NFV SOL 001 v0.6.0 113
      specification_section: 6.2.x
      specification_url: ''
    description: >-
      SwImageData describes information  related to a software image artifact.
    derived_from: tosca.datatypes.Root
    properties:
      id:
        description: >-
          Identifier of this software image.
        type: string
        required: true
      name:
        description: >-
          Name of this software image.
        type: string
        required: true
      version:
        description: >-
          Version of this software image.
        type: string
        required: true
      checksum:
        description: >-
          Checksum of the software image file.
        type: string
        required: true
      container_format:
        description: >-
          The container format describes the container file format in which software image is provided.
          Description of valid values:
          AKI: amazon kernel image
          AMI: amazon machine image
          ARI: amazon ramdisk image
          BARE: the image does not have a container or metadata envelope
          DOCKER:docker container format
          OVA: OVF package in a tarfile
          OVF: OVF container format
        type: string
        constraints:
          - valid_values: [ AKI, AMI, ARI, BARE, DOCKER, OVA, OVF ]
        required: true
      disk_format:
        description: >-
          The disk format of a software image is the format of the underlying disk image.
          Description of valid values:
          AKI: amazon kernel image
          AMI: amazon machine image
          ARI: amazon ramdisk image
          ISO: an archive format for the data contents of an optical disc, such as CD-ROM
          QCOW2: a common disk image format, which can expand dynamically and supports copy on write
          RAW: an unstructured disk image format
          VDI: a common disk image format
          VHD: a common disk image format
          VHDX: enhanced version of VHD format
          VMDK: a common disk image format
        type: string
        constraints:
          - valid_values: [ AKI, AMI, ARI, ISO, QCOW2, RAW,  VDI, VHD,  VHDX,  VMDK ]
        required: true
      min_disk:
        description: >-
          The minimal disk size requirement for this software image.
        type: scalar-unit.size
        required: true
      min_ram:
        description: >-
          The minimal RAM requirement for this software image.
        type: scalar-unit.size
        required: true
      size:
        description: >-
          The size of this software image
        type: scalar-unit.size
        required: true
      operating_system:
        description: >-
          dentifies the operating system used in the software image.
        type: string
        required: false
      supported_virtualisation_environments:
        description: >-
          Identifies the virtualization environments (e.g. hypervisor) compatible with this software image.
        type: map
        entry_schema:
          type: string
        required: false

group_types:

  tosca.groups.nfv.ElementGroup:
    _extensions:
      normative: true
      shorthand_name: ElementGroup
      type_qualified_name: toscanfv:ElementGroup
      specification: ETSI NFV SOL 001 v0.6.1
      specification_section: 6.9.1
      specification_url: ''
    derived_from: tosca.groups.Root
    properties:
      description:
        description: >-
          Human readable description of the group.
        type: string
        required: true
    members: [tosca.nodes.nfv.VnfVirtualLink]

  tosca.groups.nfv.VnfLcm:
    # PJ NOTE: Added from SOL001 draft (68r3)
    _extensions:
      normative: true
      shorthand_name: VnfLcmVnfLcm
      type_qualified_name: toscanfv:VnfLcm
      specification: ETSI NFV SOL 001 (draft 0.5.0 68r3)
      specification_section: 6.4.25
      specification_url: ''
    description: >-
    derived_from: tosca.groups.Root
    properties:
      lcm_operations_configuration:
        type: tosca.datatypes.nfv.VnfLcmOperationsConfiguration
        required: false # true in IFA011, but all members are false
    interfaces:
      Nfv:
        type: tosca.interfaces.nfv.vnf.lifecycle.Nfv

#
#   tosca.groups.nfv.security_group:
#     # PJ NOTE: Not in specs.
#     _extensions:
#       normative: true
#       shorthand_name: security_group
#       type_qualified_name: tosca:security_group
#       specification:
#       specification_section:
#       specification_url: ''
#     derived_from: tosca.groups.Root
#     description: >-
#       Define security group that are attached to interfaces.
#     properties:
#       rules:
#         description: >-
#           Rules for the security group.
#         type: map
#         entry_schema:
#           type: tosca.datatypes.nfv.security_rule
#         required: true
#     members: [ tosca.nodes.nfv.VduCpd ]

interface_types:

  tosca.interfaces.nfv.vnf.lifecycle.Nfv:
    _extensions:
      normative: true
      shorthand_name: Nfv
      type_qualified_name: toscanfv:Nfv
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.7.2
      specification_url: ''
    derived_from: tosca.interfaces.Root
    description: >-
      Provides a life cycle management script written in a Domain Specific Language (DSL).
    instantiate:
      description: Invoked upon receipt of an instantiate VNF request
    instantiate_start:
      description: Invoked before instantiate
    instantiate_end:
      description: Invoked after instantiate
    terminate:
      description: Invoked upon receipt Terminate VNF request
    terminate_start:
      description: Invoked before terminate
    terminate_end:
      description: Invoked after terminate
    modify_information:
      description: Invoked upon receipt of a Modify VNF Information request
    modify_information_start:
      description: Invoked before modify_information
    modify_information_end:
      description: Invoked after modify_information
    change_flavour:
      description: Invoked upon receipt of a Change VNF Flavour request
    change_flavour_start:
      description: Invoked before change_flavour
    change_flavour_end:
      description: Invoked after change_flavour
    change_external_connectivity:
      description: Invoked upon receipt of a Change External VNF Connectivity request
    change_external_connectivity_start:
      description: Invoked before change_external_connectivity
    change_external_connectivity_end:
      description: Invoked after change_external_connectivity
    operate:
      description: Invoked upon receipt of an Operate VNF request
    operate_start:
      description: Invoked before operate
    operate_end:
      description: Invoked after operate
    heal:
      description: Invoked upon receipt of a Heal VNF request
    heal_start:
      description: Invoked before heal
    heal_end:
      description: Invoked after heal
    scale:
      description: Invoked upon receipt of a Scale VNF request
    scale_start:
      description: Invoked before scale
    scale_end:
      description: Invoked after scale
    scale_to_level:
      description: Invoked upon receipt of a Scale VNF to Level request
    scale_to_level_start:
      description: Invoked before scale_to_level
    scale_to_level_end:
      description: Invoked after scale_to_level
  #  indicator_changed:
  #    description: On receiving a VNF indicator value change notification

  # tosca.interfaces.nfv.ns.lifecycle.Nfv:
  #   # PJ NOTE: Based from propsed interface in SOL001. Need to check if all applicable to NS!
  #   _extensions:
  #     normative: true
  #     shorthand_name: ns.lifecycle.Nfv
  #     type_qualified_name: tosca:ns.lifecycle.Nfv
  #     specification:
  #     specification_section:
  #     specification_url: ''
  #   derived_from: tosca.interfaces.Root
  #   description: >-
  #     Provides a life cycle management script written in a Domain Specific Language (DSL).
  #   create:
  #     description: Receipt of an create NS identifier
  #   create_start:
  #     description: Invoked before create
  #   create_end:
  #     description: Invoked after create
  #   instantiate:
  #     description: Receipt of an instantiate NS operation
  #   instantiate_start:
  #     description: Invoked before instantiate
  #   instantiate_end:
  #     description: Invoked after instantiate
  #   terminate:
  #     description: Terminate NS instance
  #   terminate_start:
  #     description: Invoked before terminate
  #   terminate_end:
  #     description: Invoked after terminate
  #   delete:
  #     description: Receipt of an delete NS identifier
  #   delete_start:
  #     description: Invoked before delete
  #   delete_end:
  #     description: Invoked after delete
  #   modify_information:
  #     description: Update information about instance
  #   modify_information_start:
  #     description: Invoked before modify_information
  #   modify_information_end:
  #     description: Invoked after modify_information
  #   # change_flavour:
  #   #   description: Change the deployment flavour
  #   # change_flavour_start:
  #   #   description: Invoked before change_flavour
  #   # change_flavour_end:
  #   #   description: Invoked after change_flavour
  #   # change_external_connectivity:
  #   #   description: Dis/re-connect external CPs, change connectivity parameters
  #   # change_external_connectivity_start:
  #   #   description: Invoked before change_external_connectivity
  #   # change_external_connectivity_end:
  #   #   description: Invoked after change_external_connectivity
  #   # operate:
  #   #   description: Change the state
  #   # operate_start:
  #   #   description: Invoked before operate
  #   # operate_end:
  #   #   description: Invoked after operate
  #   heal:
  #     description: Perform healing procedure
  #   heal_start:
  #     description: Invoked before heal
  #   heal_end:
  #     description: Invoked after heal
  #   scale:
  #     description: Scale along an aspect
  #   scale_start:
  #     description: Invoked before scale_in_start or scale_out_start
  #   scale_end:
  #     description: Invoked after scale_in_end or scale_out_end
  #   scale_in_start:
  #     description: Invoked before scale
  #   scale_in_end:
  #     description: Invoked after scale
  #   scale_out_start:
  #     description: Invoked before scale
  #   scale_out_end:
  #     description: Invoked after scale
  #   scale_to_level:
  #     description: Scale to a target size
  #   scale_to_level_start:
  #     description: Invoked before scale_to_level
  #   scale_to_level_end:
  #     description: Invoked after scale_to_level
  # #  indicator_changed:
  # #    description: On receiving a VNF indicator value change notification

node_types:

  # tosca.nodes.nfv.NS:
  #   # PJ NOTE: Added based on IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NS
  #     type_qualified_name: tosca:NS
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.2.2
  #     specification_url: ''
  #   description: >-
  #     The NSD information element is a deployment template whose instances are
  #     used by the NFVO for the lifecycle management of NSs.
  #   derived_from: tosca.nodes.Root
  #   properties:
  #       descriptor_id: # instead of nsd_id
  #         description: >-
  #           Identifier of this NSD information element. This attribute shall be globally unique.
  #         type: string # GUID
  #         required: true
  #       designer:
  #         description: >-
  #           Identifies the designer of the NSD.
  #         type: string
  #         required: true
  #       version:
  #         description: >-
  #           Identifies the version of the NSD.
  #         type: string
  #         required: true
  #       name: # instead of nsd_name
  #         description: >-
  #           Provides the human readable name of the NSD.
  #         type: string
  #         required: true
  #       invariant_id:
  #         description: >-
  #           Identifies an NSD in a version independent manner. This attribute is invariant
  #           across versions of NSD.
  #         type: string
  #         required: true
  #       nested_nsd_id:
  #         description: >-
  #           References the NSD of a constituent nested NS.
  #         type: list
  #         required: false
  #       vnfd_id:
  #         description: >-
  #           References the VNFD of a constituent VNF.
  #         type: list
  #         required: false
  #       pnfd_id:
  #         description: >-
  #           References the PNFD of a constituent PNF.
  #         type: list
  #         required: false
  #       sapd:
  #         description: >-
  #           Provides the descriptor of a service access point of the network service.
  #         type: map
  #         entry_schema:
  #           type: tosca.nodes.nfv.Sapd
  #         required: false
  #       vld:
  #         description: >-
  #           Provides the constituent VLDs.
  #         type: map
  #         entry_schema:
  #           type: tosca.nodes.nfv.NsVirtualLinkDesc
  #         required: false
  #       monitored_info:
  #         description: >-
  #           Identifies either a virtualised resource-related performance metric
  #           or a VNF Indicator.
  #         type: list
  #         entry_schema:
  #           type: tosca.datatypes.nfv.MonitoredData
  #         required: false
  #       auto_scaling_rule:  # PJ NOTE: Need to define this properly!
  #         description: >-
  #           Specifies a rule to trigger a scaling action on a NS instantiated
  #           according to the NSD.
  #         type: list
  #         # entry_schema:
  #         #   type: tosca.datatypes.nfv.MonitoredData
  #         required: false
  #       security:
  #         description: >-
  #           Provides a signature to prevent tampering.
  #         type: tosca.datatypes.nfv.SecurityParameters
  #         required: false  # PJ NOTE: Should be true
  #   capabilities:
  #     # vnffgd:
  #     #   description: >-
  #     #     Provides the descriptors of the applicable forwarding graphs.
  #     #   type: tosca.nodes.nfv.Vnffgd
  #     df:
  #       description: >-
  #         Identifies a DF within the scope of an NSD.
  #       type: tosca.capabilities.nfv.NsDf
  #
  #   interfaces:
  #     nfv:
  #       description: >-
  #         Provides a life cycle management script written in a DSL.
  #       type: tosca.interfaces.nfv.ns.lifecycle.Nfv


  tosca.nodes.nfv.VNF:
      _extensions:
        normative: true
        shorthand_name: VNF
        type_qualified_name: toscanfv:VNF
        specification: ETSI NFV SOL 001 v0.6.0
        specification_section: 6.8.1
        specification_url: ''
      description: >-
        The NFV Virtualized Network Function (VNF) node type describes a VNF in terms of
        deployment and operational behaviour requirements, which it contains connectivity,
        interfaces and virtualised resource requirements, as defined by ETSI GS NFV-IFA 011 [0].
      derived_from: tosca.nodes.Root
      properties:
        descriptor_id: # instead of vnfd_id
          description: >-
            Identifier of this VNFD information element. This attribute shall be globally unique.
            The format will be defined in the data model specification phase.
            The VNFD Identifier shall be used as the unique identifier of the VNF Package that
            contains this VNFD. Any modification of the content of the VNFD or the VNF Package
            shall result in a new VNFD Identifier.
          type: string # GUID
          required: true
        descriptor_version: # instead of vnfd_version
          description: >-
            Identifies the version of the VNFD.
          type: string
          required: true
        provider: # instead of vnf_provider
          description: >-
            Provider of the VNF and of the VNFD.
          type: string
          required: true
        product_name: # instead of vnf_product_name
          description: >-
            Name to identify the VNF Product. Invariant for the VNF Product lifetime.
          type: string
          required: true
        software_version: # instead of vnf_software_version
          description: >-
            Software version of the VNF. This is changed when there is any change to the
            software that is included in the VNF Package.
          type: string
          required: true
        product_info_name: # instead of vnf_product_info_name
          description: >-
            Human readable name for the VNF Product. Can change during the VNF Product lifetime.
          type: string
          required: true
        product_info_description: # instead of vnf_product_info_description
          description: >-
            Human readable description of the VNF Product. Can change during the VNF Product lifetime.
          type: string
          required: false
        vnfm_info:
          description: >-
            Identifies VNFM(s) compatible with the VNF described in this version of the VNFD.
          type: list
          entry_schema:
            type: string
          required: true
        localization_languages:
          description: >-
            Information about localization languages of the VNF (includes e.g. strings in the VNFD).
            This allows to provide one or more localization languages to support selecting a
            specific localization language at VNF instantiation time.
          type: list
          entry_schema:
            type: string
          required: false
        default_localization_language:
          description: >-
            Default localization language that is instantiated if no information about selected
            localization language is available.
            Shall be present if "localizationLanguage" is present and shall be absent otherwise.
          type: string
          required: false
        flavour_id:
          description: >-
            Identifier of this DF within the VNFD.
          type: string
          required: true
        flavour_description:
          description: >-
            Human readable description of the DF.
          type: string
          required: true
        configurable_properties:
          description: >-
            Describes the configurable properties of the VNF (e.g. related to auto scaling and auto healing).
          type: tosca.datatypes.nfv.VnfConfigurableProperties
          required: false
        modifiable_attributes:
          description: >-
            Describes the modifiable attributes of the VNF.
          type: tosca.datatypes.nfv.VnfInfoModifiableAttributes
          required: false
      capabilities:
        # PJ NOTE: Commented out as it is commented out in the spec
        # monitoring_parameter:
        #   # modelled as ad hoc capabilities in VNF node template
        #   description: >-
        #     Monitoring parameters, which can be tracked for a VNF
        #   type: tosca.datatypes.nfv.Metric
      requirements:
        - virtual_link:
            description: >-
              Describes the requirements for linking to virtual link.
            type: tosca.capabilities.nfv.VirtualLinkable
            relationship: tosca.relationships.nfv.VirtualLinksTo
            node: tosca.nodes.nfv.VnfVirtualLink
            occurrences: [ 0, UNBOUNDED ]
      interfaces:
        Nfv:
          type: tosca.interfaces.nfv.vnf.lifecycle.Nfv

  tosca.nodes.nfv.VnfExtCp:
    _extensions:
      normative: true
      shorthand_name: VnfExtCp
      type_qualified_name: toscanfv:VnfExtCp
      specification: ESTI NFV SOL 001 v0.6.0 43r3
      specification_section: 6.8.2
      specification_url: ''
    description: >-
      The VnfExtCpd node represents a logical external connection point, exposed by this VNF enabling
      connecting with Virtual Link, as defined in ETSI GS NFV-IFA 011.
    derived_from: tosca.nodes.nfv.Cp
    properties:
      virtual_network_interface_requirements:
        description: >-
          The actual virtual NIC requirements that is been assigned when instantiating the connection point.
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements
          entry_schema:
            type: string
        required: false
    requirements:
      - external_virtual_link:
          description: >-
            Specifies that CP instances require to be connected to a node that has a VirtualLinkable capability.
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          node: tosca.nodes.nfv.VnfVirtualLink
      # PJ NOTE: Removed as per the draft v0.6.0
      - internal_connection_point: #name in ETSI NFV IFA011 v0.7.3 intCpd
          description: >-
            Describes connection to the internal connection point.
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship:
          node: tosca.nodes.nfv.VduCp
          occurrences: [ 0, 1 ]
      - internal_virtual_link: #name in ETSI NFV IFA011 v0.7.3 intVirtualLinkDesc
          description: >-
            Specifies that CP instances require to be connected to a node that has a VirtualLinkable capability.
          capability: tosca.capabilities.nfv.VirtualLinkable
          relationship: tosca.relationships.nfv.VirtualLinksTo
          node: tosca.nodes.nfv.VnfVirtualLink
          required: true

  tosca.nodes.nfv.Vdu.Compute:
    # PJ NOTE: Updated from SOL001 23r2
    _extensions:
      normative: true
      shorthand_name: VDU.Compute
      type_qualified_name: toscanfv:VDU.Compute
      specification: ESTI NFV SOL 001 v0.6.0
      specification_section: 6.8.3
      specification_url: ''
    description: >-
      The TOSCA nfv.VDU.Compute node type represents the virtual compute part of a VDU entity which
      it mainly describes the deployment and operational behavior of a VNF component (VNFC), as
      defined by [ETSI NFV IFA011].
    derived_from: tosca.nodes.Root
    properties:
      name:
        description: >-
          Human readable name of the VDU.
        type: string
        required: true
      description:
        description: >-
          Human readable description of the VDU.
        type: string
        required: true
      boot_order:
        description: >-
          The key indicates the boot index (lowest index defines highest boot priority).
          The Value references a descriptor from which a valid boot device is created e.g.
          VirtualStorageDescriptor from which a VirtualStorage instance is created. If no boot order
          is defined the default boot order defined in the VIM or NFVI shall be used.
        type: list # ARIA NOTE: an explicit index (boot index) is unnecessary, contrary to IFA011
        entry_schema:
          type: string
        required: false
      nfvi_constraints:
        description: >-
          Describes constraints on the NFVI for the VNFC instance(s) created from this VDU.
          For example, aspects of a secure hosting environment for the VNFC instance that involve
          additional entities or processes. More software images can be attached to the
          virtualization container using virtual_storage.
        type: list
        entry_schema:
          type: string
        required: false
      configurable_properties:
        description: >-
          Describes the configurable properties of all VNFC instances based on this VDU.
        type: map
        entry_schema:
          type: tosca.datatypes.nfv.VnfcConfigurableProperties
        required: true
      vdu_profile:
        description: >-
          Defines additional instantiation data for the VDU.Compute node.
        type: tosca.datatypes.nfv.VduProfile
        required: true
    capabilities:
      virtual_compute:
        description: >-
          Describes virtual compute resources capabilities.
        type: tosca.capabilities.nfv.VirtualCompute
      virtual_binding:
        description: >-
          Defines ability of VirtualBindable.
        type: tosca.capabilities.nfv.VirtualBindable
        occurences: [ 1, UNBOUND ]
      monitoring_parameter:
        type: tosca.capabilities.nfv.Metric
        occurrences: [0,UNBOUND]
    requirements:
      - virtual_storage:
          description: >-
            Describes storage requirements for a virtual_storage instance attached to the virtualization
            container created from virtual_compute defined for this vdu.
          type: tosca.nodes.nfv.Vdu.VirtualStorage
          capability: tosca.capabilities.nfv.VirtualStorage
          # relationship: tosca.relationships.nfv.VDU.AttachedTo
          occurences: [ 0, UNBOUNDED ]
    artifacts:
      - sw_image:
        file: ''
        type: tosca.artifacts.nfv.SwImage

  tosca.nodes.nfv.Vdu.VirtualStorage:
    _extensions:
      normative: true
      shorthand_name: VirtualStorage
      type_qualified_name: toscanfv:VirtualStorage
      specification: ESTI NFV SOL 001 v0.6.1
      specification_section: 6.8.4
      specification_url: ''
    description: >-
      The NFV VirtualStorage node type represents a virtual storage entity which it describes the
      deployment and operational behavior of a virtual storage resources, as defined by
      [ETSI NFV IFA011].
    derived_from: tosca.nodes.Root
    properties:
      id:
        descripton: >-
          Unique identifier of the virtualStorage.
        type: string  # PJ NOTE: Not provided in spec
        required: true
      type_of_storage:
        description: >-
          Type of virtualized storage resource.
        type: string
        constraints:
          - valid_values: [ volume, object ]
        required: true
      size_of_storage:
        description: >-
          Size of virtualized storage resource (in GB).
        type: scalar-unit.size
        required: true
      rdma_enabled:
        description: >-
          Indicate if the storage support RDMA.
        type: boolean
        required: false
      vdu_storage_requirements:  # PJ NOTE: Added from SOL001 46r2
        description: >-
          Indicate if the storage support RDMA.
        type: string  # PJ NOTE: Marked TBD in spec
        required: false
      # device_bus_type:  # PJ NOTE: NOT in the specs
      #   description : >-
      #     Device bus to use for connecting the storage.
      #   type: string
      #   constraints:
      #     - valid_values: [ 'ide', 'virtio', 'scsi' ]
      #   required: false
      # device_name:  # PJ NOTE: NOT in the specs
      #   description: >-
      #     Name of the storage on the VM.
      #   type: string
      #   required: true
    capabilities:
      virtual_storage:
        description: >-
          Defines the capabilities of virtual_storage.
        type: tosca.capabilities.nfv.VirtualStorage
    artifacts:
      sw_image:
        description: >-
          Describes the software image which is directly loaded on the virtualization container
          realizing this virtual storage.
        file: ''
        type: tosca.artifacts.nfv.SwImage

  # tosca.nodes.nfv.Sapd:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: Cpd
  #     type_qualified_name: tosca:Cpd
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.2.3
  #     specification_url: ''
  #   description: >-
  #     The SAPD information element specifies the information used to instantiate the service access points of an NS.
  #   derived_from: tosca.nodes.nfv.Cpd
  #   properties:
  #     sap_address_assignment:
  #       description: >-
  #         Specify whether the SAP address assignment is under the responsibility of management and
  #         orchestration functions or not. If it is set to True, management and orchestration
  #         functions are responsible for assigning addresses to the access points instantiated
  #         from this SAPD.
  #       type: boolean
  #       required: true
  #     ns_virtual_link_desc_id:
  #       description: >-
  #         References the descriptor of the NS VL instance to which the SAP instantiated from
  #         this SAPD connects to.
  #       type: string
  #       required: false
  #     associated_cpd_id:
  #       description: >-
  #         References the descriptor of VNF or PNF external connection points the SAPs
  #         instantiated from this SAPD are mapped to.
  #       type: string
  #       required: false

  tosca.nodes.nfv.Cp:
    _extensions:
      normative: true
      shorthand_name: Cp
      type_qualified_name: toscanfv:Cp
      specification: ESTI NFV SOL 001 v0.6.1
      specification_section: 6.8.5
      specification_url: ''
    description: >-
      The TOSCA nfv.Cpd node represents network connectivity to a compute resource or a VL as defined
      by [ETSI GS NFV-IFA 011]. This is an abstract type used as parent for the various Cpd types.
    derived_from: tosca.nodes.Root
    properties:
      layer_protocol:
        description: >-
          Identifies which protocol the connection point uses for connectivity purposes.
        type: list
        entry_schema:
          type: string
        constraints:
          - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo_wire ]
        required: true
      role: # Name in ETSI NFV IFA011 v0.7.3 cpRole
        description: >-
          Identifies the role of the port in the context of the traffic flow patterns in the VNF or
          parent NS. For example a VNF with a tree flow pattern within the VNF will have legal
          cpRoles of ROOT and LEAF.
        type: string
        constraints:
          - valid_values: [ root, leaf ]
        required: false
      description:
        description: >-
          Provides human-readable information on the purpose of the connection point
          (e.g. connection point for control plane traffic).
        type: string
        required: false
      protocol_data:
        description: >-
          Provides information on the addresses to be assigned to the connection point(s) instantiated
          from this Connection Point Descriptor.
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.CpProtocolData
        required: true
      trunk_mode:
        description: >-
          Information about whether the CP instantiated from this CPD is in Trunk mode (802.1Q or other).
        type: boolean
        required: true

  tosca.nodes.nfv.VduCp:
    _extensions:
      normative: true
      shorthand_name: VduCp
      type_qualified_name: toscanfv:VduCp
      specification: ESTI NFV SOL 001 v0.6.0
      specification_section: 6.8.6
      specification_url: ''
    description: >-
      The TOSCA nfv.VduCp node type represents a type of TOSCA Cpd node and describes network
      connectivity between a VNFC instance (based on this VDU) and an internal VL as defined by
      [ETSI GS NFV-IFA 011].
    derived_from: tosca.nodes.nfv.Cp
    properties:
      bitrate_requirement:
        description: >-
          Bitrate requirement on this connection point.
        type: integer
        required: false
      virtual_network_interface_requirements:
        description: >-
          Specifies requirements on a virtual network interface realising the CPs instantiated from
          this CPD.
        type: list
        entry_schema:
          type: tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements
        required: false
      order:
        description: >-
          The order of the NIC on the compute instance (e.g. eth2).
          Note: when binding more than one port to a single compute (aka multi vNICs) and ordering is desired,
          it is *mandatory* that all ports will be set with an order value and. The order values shall
          represent a positive, arithmetic progression that starts with 0 (e.g. 0, 1, 2, …, n).
          If the property is not present, no specific value is required.
        type: integer
        required: false
        default: 0
        constraints:
          - greater_or_equal: 0
    requirements:
      - virtual_link:
         description: Describes the requirements for linking to virtual link
         capability: tosca.capabilities.nfv.VirtualLinkable
         relationship: tosca.relationships.nfv.VirtualLinksTo
         node: tosca.nodes.nfv.VnfVirtualLink
      - virtual_binding:
          descripton: >-
            Describe the requirement for binding with VDU.
          capability: tosca.capabilities.nfv.VirtualBindable
          relationship: tosca.relationships.nfv.VirtualBindsTo
          node: tosca.nodes.nfv.Vdu.Compute

  tosca.nodes.nfv.VnfVirtualLink:
    _extensions:
      normative: true
      shorthand_name: VnfVirtualLink
      type_qualified_name: toscanfv:VnfVirtualLink
      specification: ESTI NFV SOL 001 v0.6.0
      specification_section: 6.8.7
      specification_url: ''
    description: >-
      The TOSCA nfv.VnfVirtualLink node type represents a logical internal virtual link as
      defined by [ETSI GS NFV-IFA 011].
    derived_from: tosca.nodes.Root
    properties:
      connectivity_type:
        description: >-
          specifies the protocol exposed by the VL and the flow pattern supported by the VL.
        type: tosca.datatypes.nfv.ConnectivityType
        required: true
      description:
        description: >-
          Provides human-readable information on the purpose of the VL (e.g. control plane traffic).
        type: string
        required: false
      test_access:
        description: >-
          Test access facilities available on the VL (e.g. none, passive, monitoring, or active
          (intrusive) loopbacks at endpoints.
        type: list
        required: false
      vl_profile:
        description: >-
          Defines additional data for the VL: maximum and minimum bit rate requirements and QoS.
        type: tosca.datatypes.nfv.VlProfile
        required: true
    capabilities:
      monitoring_parameter:
        description: >-
          Monitoring parameter, which can be tracked for virtualized resource on VL level.
        type: tosca.capabilities.nfv.Metric
        occurrences: [0, UNBOUND]
      virtual_linkable:
        description: >-
          Defines ability of VirtualLinkable.
        type: tosca.capabilities.nfv.VirtualLinkable

  # tosca.nodes.nfv.NsVirtualLinkDesc:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: NsVirtualLinkDesc
  #     type_qualified_name: tosca:NsVirtualLinkDesc
  #     specification: ETSI NFVIFA 014
  #     specification_section: 6.5.2
  #     specification_url: ''
  #   description: >-
  #     The TOSCA nfv.NsVirtualLinkDesc node type represents a logical virtual link as
  #     defined by [ETSI GS NFV-IFA 014].
  #   derived_from: tosca.nodes.nfv.Vld
  #   properties:
  #     virtual_link_df:
  #       description: >-
  #         VL deployment falvours.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.VirtualLinkDf
  #       required: true
  #     security:
  #       description: >-
  #         Provides a signature to prevent tampering.
  #       type: tosca.datatypes.nfv.SecurityParameters
  #       required: false

  # tosca.nodes.nfv.VDU.Composition:
  #   # PJ NOTE: Added in wd05
  #   _extensions:
  #     normative: true
  #     shorthand_name: VDU.Composition
  #     type_qualified_name: tosca:VDU.Composition
  #     specification: tosca-simple-nfv-1.0
  #     specification_section: 5.9.7
  #     specification_url: ''
  #   derived_from: tosca.nodes.root
  #   properties:
  #     name:
  #       description: >-
  #         Human readable name of the Vdu.
  #       type: string
  #       required: true
  #     description:
  #       description: >-
  #         Human readable description of the Vdu.
  #       type: string
  #       required: true
  #     boot_order:
  #       description: >-
  #         The key indicates the boot index (lowest index defines highest boot priority). The Value references
  #         a descriptor from which a valid boot device is created e.g. VirtualStorageDescriptor from which a
  #         VirtualStorage instance is created.
  #         If no boot order is defined the default boot order defined in the VIM or NFVI shall be used.
  #       type: list
  #       entry_schema:
  #         type: string
  #       required: false
  #     nfvi_constraints:
  #       descripton: >-
  #         Describes constraints on the NFVI for the VNFC instance(s) created from this Vdu. For example,
  #         aspects of a secure hosting environment for the VNFC instance that involve additional entities
  #         or processes. More software images can be attached to the virtualization container using
  #         virtual_storage.
  #       type: list
  #       entry_schema:
  #         type: string
  #       required: false
  #     configurable_properties:
  #       description: >-
  #         Describes the configurable properties of all VNFC instances based on this VDU.
  #       type: map
  #       entry_schema:
  #           type: tosca.datatypes.nfv.VnfcConfigurableProperties
  #       required: true 
  #   capabilities:
  #     virtual_compute:
  #       description: >-
  #         Describes virtual compute resources capabilities.
  #       type: tosca.capabilities.nfv.VirtualCompute
  #     virtual_storage:
  #       description: >-
  #         Defines the capabilities of virtual_storage.
  #       type: tosca.capabilities.nfv.VirtualStorage
  #       occurrences: [0,UNBOUNDED]
  #   requirements:
  #     - virtual_link:
  #         description: >-
  #           Describes the requirements for linking to virtual link.
  #         capability: tosca.capabilities.nfv.VirtualLinkable
  #         relationship: tosca.relationships.nfv.VirtualLinksTo
  #         node: tosca.nodes.nfv.VnfVirtualLink
  #         occurrences: [1,UNBOUNDED]  # PJ NOTE: The spec says required no in wd05
  #
  # tosca.nodes.nfv.Vnffgd:
  #   # PJ NOTE: Added from IFA014
  #   _extensions:
  #     normative: true
  #     shorthand_name: Nfpd
  #     type_qualified_name: tosca:Nfpd
  #     specification: ETSI NFV IFA 014
  #     specification_section: 6.4.2
  #     specification_url: ''
  #   derived_from: tosca.nodes.Root
  #   description: >-
  #     The Vnffgd information element specifies a topology of connectivity of a NS and
  #     optionally forwarding rules applicable to the traffic conveyed over this topology.
  #   properties:
  #     vnfd_id:
  #       description: >-
  #         References the VNFD of a constituent VNF.
  #       type: list
  #       required: true
  #     pnfd_id:
  #       description: >-
  #         References the PNFD of a constituent PNF.
  #       type: list
  #       required: false
  #     vld_id:
  #       description: >-
  #         References the VLD of a constituent VL.
  #       type: list
  #       required: true
  #     cpd_pool_id:
  #       description: >-
  #         A reference to a pool of descriptors of connection points attached to one of the
  #         constituent VNFs and PNFs and/or one of the SAPs of the parent NS or of a nested NS.
  #       type: list
  #       required: true
  #     nfpd:
  #       description: >-
  #         The network forwarding path associated to the VNFFG.
  #       type: map
  #       entry_schema:
  #         type: tosca.datatypes.nfv.Nfpd
  #       required: false

policy_types:

  tosca.policies.nfv.LocalAffinityRule:
    _extensions:
      normative: true
      shorthand_name: LocalAffinityRule
      type_qualified_name: toscanfv:LocalAffinityRule
      specification: ETSI NFV SOL001 v0.6.0 56r3
      specification_section: 6.12.2
      specification_url: ''
    description: >-
      The LocalAffinityRule or LocalAntiAffinityRule describes the affinity or anti-affinity
      rules applicable between the virtualization containers to be created based on a
      particular VDU, or between internal VLs to be created based on a particular VnfVirtualLink.
    derived_from: tosca.policies.Root
    properties:
      scope:
        description: >-
          Specifies the scope of the rule, possible values are "NFVI-PoP", "Zone",
          "ZoneGroup", "NFVI-node".
        type: string
        constraints:
          - valid_values: [ 'NFVI-PoP', 'Zone', 'ZoneGroup', 'NFVI-node' ]
        required: true
    # targets: [ tosca.nodes.nfv.VnfVirtualLink, tosca.nodes.nfv.Vdu.compute ]

  tosca.policies.nfv.LocalAntiAffinityRule:
    _extensions:
      normative: true
      shorthand_name: LocalAntiAffinityRule
      type_qualified_name: toscanfv:LocalAntiAffinityRule
      specification: ETSI NFV SOL001 v0.6.0 56r3
      specification_section: 6.12.2
      specification_url: ''
    description: >-
      The LocalAffinityRule or LocalAntiAffinityRule describes the affinity or anti-affinity
      rules applicable between the virtualization containers to be created based on a
      particular VDU, or between internal VLs to be created based on a particular VnfVirtualLink.
    derived_from: tosca.policies.Root
    properties:
      scope:
        description: >-
          Specifies the scope of the rule, possible values are "NFVI-PoP", "Zone",
          "ZoneGroup", "NFVI-node".
        type: string
        constraints:
          - valid_values: [ 'NFVI-PoP', 'Zone', 'ZoneGroup', 'NFVI-node' ]
        required: true
    # targets: [ tosca.nodes.nfv.VnfVirtualLink, tosca.nodes.nfv.Vdu.compute ]


relationship_types:

  tosca.relationships.nfv.VirtualBindsTo:
    _extensions:
      normative: true
      shorthand_name: VirtualBindsTo
      type_qualified_name: toscanfv:VirtualBindsTo
      specification: ETSI NFV SOL001 0.6.0 115r2
      specification_section: 6.6.1
      specification_url: ''
    description: >-
      VirtualBindsTo relationship type represents an association relationship between Vdu.Compute
      and VduCpVnfVirtualLink node types.
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ tosca.capabilities.nfv.VirtualBindable ]

  tosca.relationships.nfv.Monitor:
    _extensions:
      normative: true
      shorthand_name: Monitor
      type_qualified_name: tosca:Monitor
      specification: tosca-simple-nfv-1.0
      specification_section: 5.7.2
      specification_url: 'http://docs.oasis-open.org/tosca/tosca-nfv/v1.0/csd04/tosca-nfv-v1.0-csd04.html#_Toc482896075'
    description: >-
      This relationship type represents an association relationship to the Metric capability of VDU
      node types.
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ tosca.capabilities.nfv.Metric ]

  tosca.relationships.nfv.VirtualLinksTo:
    _extensions:
      normative: true
      shorthand_name: VirtualLinksTo
      type_qualified_name: toscanfv:VirtualLinksTo
      specification: ETSI NFV SOL 001 v0.6.0
      specification_section: 6.6.3
      specification_url: ''
    description: >-
      This relationship type represents an association relationship between the VduCp and VnfVirtualLink node types.
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ tosca.capabilities.nfv.VirtualLinkable ]
